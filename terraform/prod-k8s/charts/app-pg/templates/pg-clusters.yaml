---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: "{{ .Values.pgDatabaseName }}-pg"
  annotations:
    cnpg.io/skipEmptyWalArchiveCheck: "enabled"
spec:
  imageName: "{{ .Values.pgImage }}"
  instances: 1
  primaryUpdateStrategy: unsupervised
  enablePDB: false
  monitoring:
    enablePodMonitor: true
  storage:
    storageClass: local-path
    size: "{{ .Values.pgStorageSize }}"
  bootstrap:
    {{- if .Values.isInit }}
    initdb:
      database: "{{ .Values.pgDatabaseName }}"
      owner: "{{ .Values.pgUsername }}"
      secret:
        name: "{{ .Values.pgDatabaseName }}-pg-creds"
    {{- else }}
    recovery:
      source: "{{ .Values.pgDatabaseName }}-pg-backup"
      database: "{{ .Values.pgDatabaseName }}"
      owner: "{{ .Values.pgUsername }}"
      secret:
        name: "{{ .Values.pgDatabaseName }}-pg-creds"
    {{- end }}
  externalClusters:
    - name: "{{ .Values.pgDatabaseName }}-pg-backup"
      barmanObjectStore:
        serverName: "{{ .Values.pgDatabaseName }}-pg"
        destinationPath: "s3://{{ .Values.pgBackupsBucket }}"
        s3Credentials:
          inheritFromIAMRole: true
  backup:
    barmanObjectStore:
      destinationPath: "s3://{{ .Values.pgBackupsBucket }}"
      retentionPolicy: "{{ .Values.pgRetentionPolicy }}"
      s3Credentials:
        inheritFromIAMRole: true
      wal:
        compression: gzip
      data:
        compression: gzip
