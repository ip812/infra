---
name: Infra Apply

on:
  push:
    branches:
      - main
    paths:
      - '**/*.tf'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.yml.tmpl'
      - '**/*.yaml.tmpl'
  workflow_dispatch:

env:
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
  TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
  TF_VAR_aws_secret_access_key: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
  TF_VAR_cf_account_id: ${{ secrets.TF_VAR_CF_ACCOUNT_ID }}
  TF_VAR_cf_api_token: ${{ secrets.TF_VAR_CF_API_TOKEN }}
  TF_VAR_cf_ip812_zone_id: ${{ secrets.TF_VAR_CF_IP812_ZONE_ID }}
  TF_VAR_cf_tunnel_secret: ${{ secrets.TF_VAR_CF_TUNNEL_SECRET }}
  TF_VAR_gf_cloud_access_policy_token: ${{ secrets.TF_VAR_GF_CLOUD_ACCESS_POLICY_TOKEN }}
  TF_VAR_gh_access_token: ${{ secrets.TF_VAR_GH_ACCESS_TOKEN }}
  TF_VAR_k8s_client_certificate: ${{ secrets.TF_VAR_K8S_CLIENT_CERTIFICATE }}
  TF_VAR_k8s_client_key: ${{ secrets.TF_VAR_K8S_CLIENT_KEY }}
  TF_VAR_k8s_cluster_ca_certificate: ${{ secrets.TF_VAR_K8S_CLUSTER_CA_CERTIFICATE }}
  TF_VAR_pgadmin_password: ${{ secrets.TF_VAR_PGADMIN_PASSWORD }}
  TF_VAR_pgadmin_email: ${{ secrets.TF_VAR_PGADMIN_EMAIL }}
  TF_VAR_pg_password: ${{ secrets.TF_VAR_PG_PASSWORD }}
  TF_VAR_pg_username: ${{ secrets.TF_VAR_PG_USERNAME }}
  TF_VAR_slk_github_bot_token: ${{ secrets.TF_VAR_SLK_GITHUB_BOT_TOKEN }}
  TF_VAR_slk_blog_bot_token: ${{ secrets.TF_VAR_SLK_BLOG_BOT_TOKEN }}
  TF_VAR_ts_auth_key: ${{ secrets.TF_VAR_TS_AUTH_KEY }}
  TF_VAR_ts_auth_key_ci_cd: ${{ secrets.TF_VAR_TS_AUTH_KEY_CI_CD }}
  TF_VAR_ts_api_key: ${{ secrets.TF_VAR_TS_API_KEY }}
  TF_VAR_ts_client_id: ${{ secrets.TF_VAR_TS_CLIENT_ID }}
  TF_VAR_ts_client_secret: ${{ secrets.TF_VAR_TS_CLIENT_SECRET }}
  TF_VAR_ts_oauth_client_id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
  TF_VAR_ts_oauth_secret: ${{ secrets.TS_OAUTH_SECRET }}

jobs:
  infra-apply:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Tailscale
        uses: tailscale/github-action@v3
        with:
          authkey: ${{ secrets.TS_AUTH_KEY_CI_CD }}
          # oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          # oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}

      - name: Set up AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.6"

      - name: Terraform Init prod
        run: terraform init -upgrade  
        working-directory: ./prod

      - name: Terraform Plan prod
        run: terraform plan -out=tfplan-prod
        working-directory: ./prod

      - name: Terraform Apply prod
        run: terraform apply -auto-approve tfplan-prod
        working-directory: ./prod

      - name: Wait for changes in prod to propagate
        run: | 
          sleep 30
          echo "Waiting for prod changes to propagate..."
          while :; do
            instance_cnt=$(aws ec2 describe-instances \
              --filters "Name=tag:Environment,Values=prod" \
              --filters "Name=tag:Organization,Values=ip812" \
              --filters "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].InstanceId" \
              --output text | wc -w)
              if [[ ${instance_cnt} -eq 1 ]]; then
                echo "Prod instance is up and running."
                break
              fi
              sleep 10
              echo "Waiting for prod instance to be ready..."
          done

      - name: Terraform Init prod-k8s
        run: terraform init -upgrade  
        working-directory: ./prod-k8s

      - name: Terraform Plan prod-k8s
        run: terraform plan -out=tfplan-prod-k8s
        working-directory: ./prod-k8s

      - name: Terraform Apply prod-k8s
        run: terraform apply -auto-approve tfplan-prod-k8s
        working-directory: ./prod-k8s

      - name: Tailscale logout (force cleanup)
        if: always()
        run: sudo tailscale logout || true
